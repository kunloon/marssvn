<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Repository">
    <resultMap id="BaseResultMap" type="com.svnlike.api.model.po.RepositoryPO">
        <id property="id" column="id"/>
        <result property="projectId" column="project_id"/>
        <result property="userId" column="user_id"/>
        <result property="urlName" column="url_name"/>
        <result property="projectName" column="project_name"/>
        <result property="projectUrlName" column="project_url_name"/>
        <result property="localPath" column="local_path"/>
        <result property="svnUrl" column="svn_url"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
    </resultMap>

    <insert id="add" keyProperty="id" useGeneratedKeys="true" parameterType="com.svnlike.api.model.entity.Repository">
        INSERT INTO repository (project_id, user_id, name, url_name, local_path, svn_url, description, protocol, visibility)
            VALUE (#{projectId}, #{userId}, #{name}, #{urlName}, #{localPath}, #{svnUrl}, #{description}, #{protocol}, #{visibility});
    </insert>

    <update id="updateById" parameterType="com.svnlike.api.model.entity.Repository">
        UPDATE repository
        SET name        = #{name},
            url_name    = #{urlName},
            description = #{description}
        WHERE id = #{id};
    </update>

    <delete id="deleteById" parameterType="java.util.HashMap">
        DELETE FROM repository WHERE id = #{id}
    </delete>

    <sql id="selectRepositoryJoinUserAndProject">
        SELECT rep.id,
               rep.project_id,
               rep.user_id,
               rep.name,
               rep.url_name,
               rep.local_path,
               rep.svn_url,
               rep.description,
               rep.protocol,
               rep.visibility,
               rep.created_at,
               rep.updated_at,
               p.name AS project_name,
               p.url_name AS project_url_name
        FROM repository rep
        INNER JOIN project p ON rep.project_id = p.id
    </sql>

    <select id="selectOne" parameterType="java.util.HashMap" resultMap="BaseResultMap">
        <include refid="selectRepositoryJoinUserAndProject"/>
        WHERE rep.id = #{id};
    </select>

    <select id="selectOneByUrlName" parameterType="java.util.HashMap" resultMap="BaseResultMap">
        <include refid="selectRepositoryJoinUserAndProject"/>
        WHERE p.url_name = #{projectUrlName} and rep.url_name = #{repositoryUrlName};
    </select>

    <select id="selectMany" parameterType="java.util.HashMap" resultMap="BaseResultMap">
        <include refid="selectRepositoryJoinUserAndProject"/>
        <where>
            <if test="keyword != null and keyword != ''">
                <bind name="keywordLike" value="'%' + _parameter.keyword + '%'"/>
                rep.url_name LIKE #{keywordLike} OR rep.name LIKE #{keywordLike} OR rep.description LIKE #{keywordLike}
            </if>
            <if test="projectId != null and projectId != ''">
                rep.project_id = #{projectId}
            </if>
        </where>
        ORDER BY rep.id DESC
        <if test="offset != null and offset != ''">
            LIMIT #{offset}, #{pageSize}
        </if>
    </select>

    <select id="selectCountByName" parameterType="java.util.HashMap" resultType="java.lang.Long">
        SELECT count(id) AS count
        FROM repository
        WHERE project_id = #{projectId} AND name = #{name};
    </select>

    <select id="selectCountByUrlName" parameterType="java.util.HashMap" resultType="java.lang.Long">
        SELECT count(id) AS count
        FROM repository
        WHERE project_id = #{projectId} AND url_name = #{urlName};
    </select>
</mapper>
